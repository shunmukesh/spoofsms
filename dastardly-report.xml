<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testsuites failures="13" name="Dastardly scan results - have a vulnerability-free day!" tests="42">
    <testsuite failures="3" name="http://testhtml5.vulnweb.com:80/" tests="3">
        <testcase name="Vulnerable JavaScript dependency">
            <failure message="Vulnerable JavaScript dependency found at http://testhtml5.vulnweb.com/" type="Low"><![CDATA[
Severity: Low

Confidence: Tentative

Host: http://testhtml5.vulnweb.com

Path: /


Issue Detail
We observed 3 vulnerable JavaScript libraries.

We detected jquery version 1.9.1.min, which has the following vulnerabilities:



- 
CVE-2015-9251 (https://nvd.nist.gov/vuln/detail/CVE-2015-9251): 3rd party CORS request may execute



- 
CVE-2015-9251 (https://nvd.nist.gov/vuln/detail/CVE-2015-9251): parseHTML() executes scripts in event handlers



- 
CVE-2019-11358 (https://nvd.nist.gov/vuln/detail/CVE-2019-11358): jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution



- 
CVE-2020-11022 (https://nvd.nist.gov/vuln/detail/CVE-2020-11022): Regex in its jQuery.htmlPrefilter sometimes may introduce XSS



- 
CVE-2020-11023 (https://nvd.nist.gov/vuln/detail/CVE-2020-11023): Regex in its jQuery.htmlPrefilter sometimes may introduce XSS





We also detected bootstrap version 2.3.1, which has the following vulnerabilities:



- 
CVE-2019-8331 (https://nvd.nist.gov/vuln/detail/CVE-2019-8331): XSS in data-template, data-content and data-title properties of tooltip/popover



- 
CVE-2018-14041 (https://nvd.nist.gov/vuln/detail/CVE-2018-14041): XSS in data-target property of scrollspy



- 
CVE-2018-14040 (https://nvd.nist.gov/vuln/detail/CVE-2018-14040): XSS in collapse data-parent attribute



- 
CVE-2018-14042 (https://nvd.nist.gov/vuln/detail/CVE-2018-14042): XSS in data-container property of tooltip





We also detected angularjs version 1.0.6, which has the following vulnerabilities:



- 
CVE-2020-7676 (https://nvd.nist.gov/vuln/detail/CVE-2020-7676): XSS may be triggered in AngularJS applications that sanitize user-controlled HTML snippets before passing them to JQLite methods like JQLite.prepend, JQLite.after, JQLite.append, JQLite.replaceWith, JQLite.append, new JQLite and angular.element.



- 
CVE-2020-7676 (https://nvd.nist.gov/vuln/detail/CVE-2020-7676): angular.js prior to 1.8.0 allows cross site scripting. The regex-based input HTML replacement may turn sanitized code into unsanitized one.



- 
Prototype pollution

https://github.com/angular/angular.js/commit/726f49dcf6c23106ddaf5cfd5e2e592841db743a (https://github.com/angular/angular.js/commit/726f49dcf6c23106ddaf5cfd5e2e592841db743a)

https://github.com/angular/angular.js/blob/master/CHANGELOG.md#179-pollution-eradication-2019-11-19 (https://github.com/angular/angular.js/blob/master/CHANGELOG.md#179-pollution-eradication-2019-11-19)



- 
CVE-2019-14863 (https://nvd.nist.gov/vuln/detail/CVE-2019-14863): XSS through xlink:href attributes



- 
The attribute usemap can be used as a security exploit

https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1230-patronal-resurrection-2016-07-21 (https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1230-patronal-resurrection-2016-07-21)



- 
Universal CSP bypass via add-on in Firefox

https://github.com/mozilla/addons-linter/issues/1000#issuecomment-282083435 (https://github.com/mozilla/addons-linter/issues/1000#issuecomment-282083435)

http://pastebin.com/raw/kGrdaypP (http://pastebin.com/raw/kGrdaypP)



- 
DOS in $sanitize

https://github.com/angular/angular.js/blob/master/CHANGELOG.md (https://github.com/angular/angular.js/blob/master/CHANGELOG.md)

https://github.com/angular/angular.js/pull/15699 (https://github.com/angular/angular.js/pull/15699)



- 
XSS in $sanitize in Safari/Firefox

https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94 (https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94)



- 
End-of-Life: Long term support for AngularJS has been discontinued

https://blog.angular.io/discontinued-long-term-support-for-angularjs-cc066b82e65a?gi=9d3103b5445c (https://blog.angular.io/discontinued-long-term-support-for-angularjs-cc066b82e65a?gi=9d3103b5445c)







Issue Background

The use of third-party JavaScript libraries can introduce a range of DOM-based vulnerabilities, including some that can be used to hijack user accounts like DOM-XSS.




Common JavaScript libraries typically enjoy the benefit of being heavily audited. This may mean that bugs are quickly identified and patched upstream, resulting in a steady stream of security updates that need to be applied. Although it may be tempting to ignore updates, using a library with missing security patches can make your website exceptionally easy to exploit. Therefore, it's important to ensure that any available security updates are applied promptly.



Some library vulnerabilities expose every application that imports the library, but others only affect applications that use certain library features. Accurately identifying which library vulnerabilities apply to your website can be difficult, so we recommend applying all available security updates regardless.



Issue Remediation
Develop a patch-management strategy to ensure that security updates are promptly applied to all third-party libraries in your application. Also, consider reducing your attack surface by removing any libraries that are no longer in use.


Evidence
Request:
GET / HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:41 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Access-Control-Allow-Origin: *
Content-Length: 6940

<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html" data-ng-app="itemsApp">
<head>
<meta charset="utf-8">
<title>SecurityTweets - HTML5 test website for Acunetix Web VulnerabilSnip<!-- Placed at the end of the document so the pages load faster -->
<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"></script>Snip



Vulnerability Classifications

- CWE-1104: Use of Unmaintained Third Party Components (https://cwe.mitre.org/data/definitions/1104.html)

- A9: Using Components with Known Vulnerabilities (https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
        <testcase name="Cross-origin resource sharing - arbitrary origin trusted">
            <failure message="Cross-origin resource sharing: arbitrary origin trusted found at http://testhtml5.vulnweb.com/" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /


Issue Detail
The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request that allows access from any domain.

The application allowed access from the requested origin http://etrnnaosxhti.com

If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.

Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.

Issue Background
An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.

Trusting arbitrary origins effectively disables the same-origin policy, allowing two-way interaction by third-party web sites. Unless the response consists only of unprotected public content, this policy is likely to present a security risk.

If the site  specifies the header Access-Control-Allow-Credentials: true, third-party sites may be able to carry out privileged actions and retrieve sensitive information. Even if it does not, attackers may be able to  bypass any IP-based access controls by proxying through users'  browsers.


Issue Remediation
Rather than using a wildcard or programmatically verifying supplied origins, use a whitelist of trusted domains.


Evidence
Request:
GET / HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0
Origin: http://etrnnaosxhti.com



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:05:27 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Access-Control-Allow-Origin: *
Content-Length: 6940

<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html" data-ng-app="itemsApp">
<head>
<meta charset="utf-8">
<title>SecurityTweets - HTML5 test website for Acunetix Web VulnerabilSnip



References
  
- Web Security Academy: Cross-origin resource sharing (CORS) (https://portswigger.net/web-security/cors)

-  Exploiting CORS Misconfigurations (https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties) 



Vulnerability Classifications

- CWE-942: Overly Permissive Cross-domain Whitelist (https://cwe.mitre.org/data/definitions/942.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
        <testcase name="Cross-origin resource sharing">
            <failure message="Cross-origin resource sharing found at http://testhtml5.vulnweb.com/" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /


Issue Detail
The application implements an HTML5 cross-origin resource sharing (CORS) policy for this request.

If the application relies on network firewalls or other IP-based access controls, this policy is likely to present a security risk.

Since the Vary: Origin header was not present in the response, reverse proxies and intermediate servers may cache it. This may enable an attacker to carry out cache poisoning attacks.

Issue Background
An HTML5 cross-origin resource sharing (CORS) policy controls whether and how content running on other domains can perform two-way interaction with the domain that publishes the policy. The policy is fine-grained and can apply access controls per-request based on the URL and other features of the request.
If another domain is allowed by the policy, then that domain can potentially attack users of the application. If a user is logged in to the application, and visits a domain allowed by the policy, then any malicious content running on that domain can potentially retrieve content from the application, and sometimes carry out actions within the security context of the logged in user.

Even if an allowed domain is not overtly malicious in itself, security vulnerabilities within that domain could potentially be leveraged by an attacker to exploit the trust relationship and attack the application that allows access. CORS policies on pages containing sensitive information should be reviewed to determine whether it is appropriate for the application to trust both the intentions and security posture of any domains granted access.


Issue Remediation
Any inappropriate domains should be removed from the CORS policy.


Evidence
Request:
GET / HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0
Origin: http://testhtml5.vulnweb.com



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:05:26 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Access-Control-Allow-Origin: *
Content-Length: 6940

<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html" data-ng-app="itemsApp">
<head>
<meta charset="utf-8">
<title>SecurityTweets - HTML5 test website for Acunetix Web VulnerabilSnip



References
  
- Web Security Academy: Cross-origin resource sharing (CORS) (https://portswigger.net/web-security/cors)

-  Exploiting CORS Misconfigurations (https://portswigger.net/research/exploiting-cors-misconfigurations-for-bitcoins-and-bounties) 



Vulnerability Classifications

- CWE-942: Overly Permissive Cross-domain Whitelist (https://cwe.mitre.org/data/definitions/942.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/archive" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=-5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=-15" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=10" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=-10" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=-5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/latest?offset=0" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=15" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=-5" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=-10" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=0" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=-15" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=0" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=0" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/ajax/popular?offset=0" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/contact" tests="1">
        <testcase name="Vulnerable JavaScript dependency">
            <failure message="Vulnerable JavaScript dependency found at http://testhtml5.vulnweb.com/contact" type="Low"><![CDATA[
Severity: Low

Confidence: Tentative

Host: http://testhtml5.vulnweb.com

Path: /contact


Issue Detail
We observed 3 vulnerable JavaScript libraries.

We detected jquery version 1.9.1.min, which has the following vulnerabilities:



- 
CVE-2015-9251 (https://nvd.nist.gov/vuln/detail/CVE-2015-9251): 3rd party CORS request may execute



- 
CVE-2015-9251 (https://nvd.nist.gov/vuln/detail/CVE-2015-9251): parseHTML() executes scripts in event handlers



- 
CVE-2019-11358 (https://nvd.nist.gov/vuln/detail/CVE-2019-11358): jQuery before 3.4.0, as used in Drupal, Backdrop CMS, and other products, mishandles jQuery.extend(true, {}, ...) because of Object.prototype pollution



- 
CVE-2020-11022 (https://nvd.nist.gov/vuln/detail/CVE-2020-11022): Regex in its jQuery.htmlPrefilter sometimes may introduce XSS



- 
CVE-2020-11023 (https://nvd.nist.gov/vuln/detail/CVE-2020-11023): Regex in its jQuery.htmlPrefilter sometimes may introduce XSS





We also detected bootstrap version 2.3.1, which has the following vulnerabilities:



- 
CVE-2019-8331 (https://nvd.nist.gov/vuln/detail/CVE-2019-8331): XSS in data-template, data-content and data-title properties of tooltip/popover



- 
CVE-2018-14041 (https://nvd.nist.gov/vuln/detail/CVE-2018-14041): XSS in data-target property of scrollspy



- 
CVE-2018-14040 (https://nvd.nist.gov/vuln/detail/CVE-2018-14040): XSS in collapse data-parent attribute



- 
CVE-2018-14042 (https://nvd.nist.gov/vuln/detail/CVE-2018-14042): XSS in data-container property of tooltip





We also detected angularjs version 1.0.6, which has the following vulnerabilities:



- 
CVE-2020-7676 (https://nvd.nist.gov/vuln/detail/CVE-2020-7676): XSS may be triggered in AngularJS applications that sanitize user-controlled HTML snippets before passing them to JQLite methods like JQLite.prepend, JQLite.after, JQLite.append, JQLite.replaceWith, JQLite.append, new JQLite and angular.element.



- 
CVE-2020-7676 (https://nvd.nist.gov/vuln/detail/CVE-2020-7676): angular.js prior to 1.8.0 allows cross site scripting. The regex-based input HTML replacement may turn sanitized code into unsanitized one.



- 
Prototype pollution

https://github.com/angular/angular.js/commit/726f49dcf6c23106ddaf5cfd5e2e592841db743a (https://github.com/angular/angular.js/commit/726f49dcf6c23106ddaf5cfd5e2e592841db743a)

https://github.com/angular/angular.js/blob/master/CHANGELOG.md#179-pollution-eradication-2019-11-19 (https://github.com/angular/angular.js/blob/master/CHANGELOG.md#179-pollution-eradication-2019-11-19)



- 
CVE-2019-14863 (https://nvd.nist.gov/vuln/detail/CVE-2019-14863): XSS through xlink:href attributes



- 
The attribute usemap can be used as a security exploit

https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1230-patronal-resurrection-2016-07-21 (https://github.com/angular/angular.js/blob/master/CHANGELOG.md#1230-patronal-resurrection-2016-07-21)



- 
Universal CSP bypass via add-on in Firefox

https://github.com/mozilla/addons-linter/issues/1000#issuecomment-282083435 (https://github.com/mozilla/addons-linter/issues/1000#issuecomment-282083435)

http://pastebin.com/raw/kGrdaypP (http://pastebin.com/raw/kGrdaypP)



- 
DOS in $sanitize

https://github.com/angular/angular.js/blob/master/CHANGELOG.md (https://github.com/angular/angular.js/blob/master/CHANGELOG.md)

https://github.com/angular/angular.js/pull/15699 (https://github.com/angular/angular.js/pull/15699)



- 
XSS in $sanitize in Safari/Firefox

https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94 (https://github.com/angular/angular.js/commit/8f31f1ff43b673a24f84422d5c13d6312b2c4d94)



- 
End-of-Life: Long term support for AngularJS has been discontinued

https://blog.angular.io/discontinued-long-term-support-for-angularjs-cc066b82e65a?gi=9d3103b5445c (https://blog.angular.io/discontinued-long-term-support-for-angularjs-cc066b82e65a?gi=9d3103b5445c)







Issue Background

The use of third-party JavaScript libraries can introduce a range of DOM-based vulnerabilities, including some that can be used to hijack user accounts like DOM-XSS.




Common JavaScript libraries typically enjoy the benefit of being heavily audited. This may mean that bugs are quickly identified and patched upstream, resulting in a steady stream of security updates that need to be applied. Although it may be tempting to ignore updates, using a library with missing security patches can make your website exceptionally easy to exploit. Therefore, it's important to ensure that any available security updates are applied promptly.



Some library vulnerabilities expose every application that imports the library, but others only affect applications that use certain library features. Accurately identifying which library vulnerabilities apply to your website can be difficult, so we recommend applying all available security updates regardless.



Issue Remediation
Develop a patch-management strategy to ensure that security updates are promptly applied to all third-party libraries in your application. Also, consider reducing your attack surface by removing any libraries that are no longer in use.


Evidence
Request:
POST /contact HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
Origin: http://testhtml5.vulnweb.com
Upgrade-Insecure-Requests: 1
Referer: http://testhtml5.vulnweb.com/
Content-Type: application/x-www-form-urlencoded
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0
Content-Length: 77

firstName=kcdAQWBj&lastName=wnDRPVdn&address=103751&subject=na&message=413889

Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:04:08 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Content-Length: 4474

<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html" data-ng-app="itemsApp">
<head>
<meta charset="utf-8">
<title>SecurityTweets</title>
<meta name="viewport" content="widthSnip<!-- Placed at the end of the document so the pages load faster -->
<script src="http://code.jquery.com/jquery-1.9.1.min.js"></script>
<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js"></script>Snip



Vulnerability Classifications

- CWE-1104: Use of Unmaintained Third Party Components (https://cwe.mitre.org/data/definitions/1104.html)

- A9: Using Components with Known Vulnerabilities (https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/forgotpw" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/login" tests="1">
        <testcase name="Cross-site scripting (reflected)">
            <failure message="Cross-site scripting (reflected) found at http://testhtml5.vulnweb.com/login" type="High"><![CDATA[
Severity: High

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /login


Issue Detail
The value of the username request parameter is copied into the HTML document as plain text between tags. The payload v0hnu<script>alert(1)</script>oo0eo was submitted in the username parameter. This input was echoed unmodified in the application's response.

This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response.

Note that a redirection occurred between the attack request and the response containing the echoed input. It is necessary to follow this redirection for the attack to succeed. When the attack is carried out via a browser, the redirection will be followed automatically.

Issue Background
Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.

The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.

Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).

The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. 


Issue Remediation
In most situations where user-controllable data is copied into application responses, cross-site scripting
attacks can be prevented using two layers of defenses:



- Input should be validated as strictly as possible on arrival, given the kind of content that
it is expected to contain. For example, personal names should consist of alphabetical
and a small range of typographical characters, and be relatively short; a year of birth
should consist of exactly four numerals; email addresses should match a well-defined
regular expression. Input which fails the validation should be rejected, not sanitized.

- User input should be HTML-encoded at any point where it is copied into
application responses. All HTML metacharacters, including < > " ' and =, should be
replaced with the corresponding HTML entities (&lt; &gt; etc).

In cases where the application's functionality allows users to author content using
a restricted subset of HTML tags and attributes (for example, blog comments which
allow limited formatting and linking), it is necessary to parse the supplied HTML to
validate that it does not use any dangerous syntax; this is a non-trivial task.


Evidence
Request:
POST /login HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
Origin: http://testhtml5.vulnweb.com
Upgrade-Insecure-Requests: 1
Referer: http://testhtml5.vulnweb.com/
Content-Type: application/x-www-form-urlencoded
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0
Content-Length: 41

username=cQRkpmmsv0hnu%3cscript%3ealert(1)%3c%2fscript%3eoo0eo&password=d8S%21d4z%21Z6

Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:08:34 GMT
Content-Type: text/html; charset=utf-8
Connection: close
Access-Control-Allow-Origin: *
Content-Length: 6955

<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html" data-ng-app="itemsApp">
<head>
<meta charset="utf-8">
<title>SecurityTweets - HTML5 test website for Acunetix Web VulnerabilSnip<b>cQRkpmmsv0hnu<script>alert(1)</script>oo0eo</b>Snip



References
	
- Web Security Academy: Cross-site scripting (https://portswigger.net/web-security/cross-site-scripting)

- Web Security Academy: Reflected cross-site scripting (https://portswigger.net/web-security/cross-site-scripting/reflected)

- Using Burp to Find XSS issues (https://support.portswigger.net/customer/portal/articles/1965737-Methodology_XSS.html)



Vulnerability Classifications

- CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting') (https://cwe.mitre.org/data/definitions/79.html)

- CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS) (https://cwe.mitre.org/data/definitions/80.html)

- CWE-116: Improper Encoding or Escaping of Output (https://cwe.mitre.org/data/definitions/116.html)

- CWE-159: Failure to Sanitize Special Element (https://cwe.mitre.org/data/definitions/159.html)

- CAPEC-591: Reflected XSS (https://capec.mitre.org/data/definitions/591.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/robots.txt" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/app/app.js" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/app/controllers/controllers.js" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/libs/sessvars.js" tests="1">
        <testcase name="Vulnerable JavaScript dependency">
            <failure message="Vulnerable JavaScript dependency found at http://testhtml5.vulnweb.com/static/app/libs/sessvars.js" type="Low"><![CDATA[
Severity: Low

Confidence: Tentative

Host: http://testhtml5.vulnweb.com

Path: /static/app/libs/sessvars.js


Issue Detail
We observed a vulnerable JavaScript library.

We detected sessvars version 1.00, which has the following vulnerability:



- 
Unsanitized data passed to eval()

All provided links appear to be broken but have been provided for reference:
http://www.thomasfrank.se/sessionvars.html (http://www.thomasfrank.se/sessionvars.html)







Issue Background

The use of third-party JavaScript libraries can introduce a range of DOM-based vulnerabilities, including some that can be used to hijack user accounts like DOM-XSS.




Common JavaScript libraries typically enjoy the benefit of being heavily audited. This may mean that bugs are quickly identified and patched upstream, resulting in a steady stream of security updates that need to be applied. Although it may be tempting to ignore updates, using a library with missing security patches can make your website exceptionally easy to exploit. Therefore, it's important to ensure that any available security updates are applied promptly.



Some library vulnerabilities expose every application that imports the library, but others only affect applications that use certain library features. Accurately identifying which library vulnerabilities apply to your website can be difficult, so we recommend applying all available security updates regardless.



Issue Remediation
Develop a patch-management strategy to ensure that security updates are promptly applied to all third-party libraries in your application. Also, consider reducing your attack surface by removing any libraries that are no longer in use.


Evidence
Request:
GET /static/app/libs/sessvars.js HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:05:17 GMT
Content-Type: application/javascript
Content-Length: 8869
Last-Modified: Tue, 07 May 2013 10:17:48 GMT
Connection: close
ETag: "5188d4cc-22a5"
Expires: Sat, 08 Jul 2023 18:05:17 GMT
Cache-Control: max-age=2592000
Accept-Ranges: bytes

/*
sessvars ver 1.00
- JavaScript based session object
copyright 2008 Thomas Frank

This EULA grants you the following rights:

Installation and Use. You may install and use an unlimited number of copies of the Snip



Vulnerability Classifications

- CWE-1104: Use of Unmaintained Third Party Components (https://cwe.mitre.org/data/definitions/1104.html)

- A9: Using Components with Known Vulnerabilities (https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/about.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/about.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/about.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/about.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:53 GMT
Content-Type: text/html
Last-Modified: Fri, 10 May 2013 10:14:31 GMT
Connection: close
ETag: W/"518cc887-8a3"
Expires: Sat, 08 Jul 2023 18:03:53 GMT
Cache-Control: max-age=2592000
Content-Length: 2211

<b>SecurityTweets</b> - continuously updated collection of tweets from security people.
<br><br>
<p>
This is a vulnerable test website for <b>Acunetix WVS (Web Vulnerability Scanner)</b> implementeSnip



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/archive.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/archive.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/archive.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/archive.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:51 GMT
Content-Type: text/html
Last-Modified: Thu, 30 May 2013 09:29:19 GMT
Connection: close
ETag: W/"51a71bef-497"
Expires: Sat, 08 Jul 2023 18:03:51 GMT
Cache-Control: max-age=2592000
Content-Length: 1175

<div id="loader">
Loading ...
<i class="icon-spinner icon-spin icon-2x pull-left"></i>
</div>

<div class="row-fluid">
<div class="pull-left">
<input type="text" placeholderSnip



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/carousel.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/carousel.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/carousel.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/carousel.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:49 GMT
Content-Type: text/html
Last-Modified: Tue, 28 May 2013 09:39:09 GMT
Connection: close
ETag: W/"51a47b3d-3a9"
Expires: Sat, 08 Jul 2023 18:03:49 GMT
Cache-Control: max-age=2592000
Content-Length: 937

<div id="loader">
Loading ...
<i class="icon-spinner icon-spin icon-2x pull-left"></i>
</div>
<div id="carouselView" class="carousel slide carouselView"><!-- class of slide for animation -Snip



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/contact.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/contact.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/contact.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/contact.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:54 GMT
Content-Type: text/html
Last-Modified: Thu, 30 May 2013 09:29:19 GMT
Connection: close
ETag: W/"51a71bef-4e2"
Expires: Sat, 08 Jul 2023 18:03:54 GMT
Cache-Control: max-age=2592000
Content-Length: 1250

<form class="well span10" action="/contact" method="POST">
<div class="row-fluid">
<div class="span6">
<label>First Name</label>
<input type="text" class="span8Snip



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/itemsList.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/itemsList.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/itemsList.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/itemsList.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:42 GMT
Content-Type: text/html
Last-Modified: Thu, 31 Jul 2014 13:15:40 GMT
Connection: close
ETag: W/"53da417c-a99"
Expires: Sat, 08 Jul 2023 18:03:42 GMT
Cache-Control: max-age=2592000
Content-Length: 2713

<div class="row-fluid">
<div class="pull-left">
<input type="text" placeholder="Filter results" ng-model="searchText">
</div>

<div class="pull-right">
<div ng-show="Snip



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/app/partials/itemsList.html" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/latest.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/latest.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/latest.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/latest.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:48 GMT
Content-Type: text/html
Last-Modified: Tue, 14 May 2013 08:25:32 GMT
Connection: close
ETag: W/"5191f4fc-9a"
Expires: Sat, 08 Jul 2023 18:03:48 GMT
Cache-Control: max-age=2592000
Content-Length: 154

<div id="loader">
Loading ... <img src="/static/img/ajax-loader.gif" alt="">
</div>
<div data-ng-include="'/static/app/partials/itemsList.html'" />



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="1" name="http://testhtml5.vulnweb.com:80/static/app/partials/popular.html" tests="1">
        <testcase name="HTML does not specify charset">
            <failure message="HTML does not specify charset found at http://testhtml5.vulnweb.com/static/app/partials/popular.html" type="Info"><![CDATA[
Severity: Info

Confidence: Certain

Host: http://testhtml5.vulnweb.com

Path: /static/app/partials/popular.html


Issue Description
If a  response states that it contains HTML content but does not specify a character set, then the browser may analyze the HTML and attempt to determine which character set it appears to be using. Even if the majority of the HTML actually employs a standard character set such as UTF-8, the presence of non-standard characters anywhere in the response may cause the browser to interpret the content using a different character set. This can have unexpected results, and can lead to cross-site scripting vulnerabilities in which non-standard encodings like UTF-7 can be used to bypass the application's defensive filters.

In most cases, the absence of a charset directive does not constitute a security flaw, particularly if the response contains static content. You should review the contents of affected responses, and the context in which they appear, to determine whether any vulnerability exists. 


Issue Remediation
For every response containing HTML content, the application should include within the Content-type header a directive specifying a standard recognized character set, for example charset=ISO-8859-1.



Evidence
Request:
GET /static/app/partials/popular.html HTTP/1.1
Host: testhtml5.vulnweb.com
Accept-Encoding: gzip, deflate
Accept: application/json, text/plain, */*
Accept-Language: en-US;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.5359.125 Safari/537.36
Connection: close
Cache-Control: max-age=0
X-Requested-With: XMLHttpRequest
Referer: http://testhtml5.vulnweb.com/
Sec-CH-UA: ".Not/A)Brand";v="99", "Google Chrome";v="108", "Chromium";v="108"
Sec-CH-UA-Platform: Windows
Sec-CH-UA-Mobile: ?0



Response:
HTTP/1.1 200 OK
Server: nginx/1.19.0
Date: Thu, 08 Jun 2023 18:03:42 GMT
Content-Type: text/html
Last-Modified: Tue, 30 Apr 2013 10:18:15 GMT
Connection: close
ETag: W/"517f9a67-a9"
Expires: Sat, 08 Jul 2023 18:03:42 GMT
Cache-Control: max-age=2592000
Content-Length: 169

<div id="loader">
Loading ...
<i class="icon-spinner icon-spin icon-2x pull-left"></i>
</div>
<div data-ng-include="'/static/app/partials/itemsList.html'" />



Vulnerability Classifications

- CWE-16: Configuration (https://cwe.mitre.org/data/definitions/16.html)

- CWE-436: Interpretation Conflict (https://cwe.mitre.org/data/definitions/436.html)



Reported by Dastardly: https://portswigger.net/burp/dastardly/scan-checks
]]></failure>
        </testcase>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/app/partials/popular.html" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/app/post.js" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/app/services/itemsService.js" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
    <testsuite failures="0" name="http://testhtml5.vulnweb.com:80/static/css/style.css" tests="1">
        <testcase name="No issues were identified"/>
    </testsuite>
</testsuites>
